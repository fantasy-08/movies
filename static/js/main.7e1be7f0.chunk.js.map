{"version":3,"sources":["Components/Search.js","Components/Result.js","Components/Results.js","Components/moreinfo.js","App.js","serviceWorker.js","index.js"],"names":["Search","handleInput","search","className","type","placeholder","onChange","onKeyPress","Result","result","openPopup","onClick","imdbID","src","Poster","Title","Results","results","map","key","moreinfo","selected","closePopup","Year","imdbRating","Plot","App","apiurl","useState","s","state","setState","e","target","value","prevState","axios","then","data","console","log","resluts","id","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"6NAeeA,MAbf,YAAuC,IAAtBC,EAAqB,EAArBA,YAAYC,EAAS,EAATA,OACzB,OACI,6BAASC,UAAU,kBACf,2BAAOC,KAAK,OACZC,YAAY,kBACZF,UAAU,YACVG,SAAUL,EACVM,WAAYL,MCETM,MATf,YAAqC,IAApBC,EAAmB,EAAnBA,OAAOC,EAAY,EAAZA,UACpB,OACI,yBAAKP,UAAU,SAASQ,QAAS,kBAAID,EAAUD,EAAOG,UAClD,yBAAKC,IAAKJ,EAAOK,SACjB,4BAAKL,EAAOM,SCOTC,MAXf,YAAuC,IAArBC,EAAoB,EAApBA,QAAQP,EAAY,EAAZA,UACtB,OACI,6BAASP,UAAU,WACdc,EAAQC,KAAI,SAAAT,GAAM,OACf,kBAAC,EAAD,CAAQU,IAAKV,EAAOG,OAAQH,OAAQA,EAAQC,UAAWA,SCYxDU,MAhBf,YAA2C,IAAxBC,EAAuB,EAAvBA,SAAUC,EAAa,EAAbA,WACzB,OACI,6BAASnB,UAAU,SACxB,yBAAKA,UAAU,WACd,4BAAMkB,EAASN,MAAf,IAAuB,kCAASM,EAASE,KAAlB,MACvB,uBAAGpB,UAAU,UAAb,WAA+BkB,EAASG,YACxC,yBAAKrB,UAAU,QACd,yBAAKU,IAAKQ,EAASP,SACnB,2BAAIO,EAASI,OAEd,4BAAQtB,UAAU,QAAQQ,QAASW,GAAnC,W,gBC+CWI,MAtDf,WACE,IAAMC,EAAS,0CADF,EAEYC,mBAAS,CAChCC,EAAE,GACFZ,QAAQ,GACRI,SAAS,KALE,mBAENS,EAFM,KAEAC,EAFA,KAwCb,OACE,yBAAK5B,UAAU,OACb,4BAAQA,UAAU,cAChB,4CAEF,8BACE,kBAAC,EAAD,CAAQF,YA3BI,SAAC+B,GACjB,IAAIH,EAAEG,EAAEC,OAAOC,MACfH,GAAS,SAAAI,GACP,OAAO,2BAAIA,GAAX,IAAqBN,EAAEA,QAwBa3B,OAvCzB,SAAC8B,GACH,UAARA,EAAEb,KACHiB,IAAMT,EAAO,MAAMG,EAAMD,GAAGQ,MAAK,YAAW,IAATC,EAAQ,EAARA,KACjCC,QAAQC,IAAIF,GACZ,IAAIG,EAAQH,EAAKtC,OACjBuC,QAAQC,IAAIF,EAAKtC,QACjB+B,GAAS,SAAAI,GACP,OAAO,2BAAIA,GAAX,IAAqBlB,QAAQwB,aAiC/B,kBAAC,EAAD,CAASxB,QAASa,EAAMb,QAASP,UArBvB,SAAAgC,GACdN,IAAMT,EAAO,MAAMe,GAAIL,MAAK,YAAW,IACjC5B,EADgC,EAAR6B,KAG5BP,GAAS,SAAAI,GACP,OAAO,2BAAIA,GAAX,IAAqBd,SAASZ,aAiBG,oBAAxBqB,EAAMT,SAASN,OAAsB,kBAAC,EAAD,CAAUM,SAAUS,EAAMT,SAAUC,WAbzE,WACbS,GAAS,SAAAI,GACP,OAAO,2BAAIA,GAAX,IAAqBd,SAAS,cC9BhBsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBlB,MAAK,SAAAmB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLpB,QAAQoB,MAAMA,EAAMC,c","file":"static/js/main.7e1be7f0.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nfunction Search({handleInput,search}) {\r\n    return (\r\n        <section className=\"searchbox-wrap\">\r\n            <input type=\"text\"\r\n            placeholder=\"Let's Binge it!\" \r\n            className=\"searchbox\" \r\n            onChange={handleInput}\r\n            onKeyPress={search}\r\n            />\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default Search\r\n","import React from 'react'\r\n\r\nfunction Result({result,openPopup}) {\r\n    return (\r\n        <div className=\"result\" onClick={()=>openPopup(result.imdbID)}>\r\n            <img src={result.Poster}/>\r\n            <h3>{result.Title}</h3>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Result\r\n","import React from 'react'\r\nimport Result from './Result'\r\nfunction Results({results,openPopup}) {\r\n    return (\r\n        <section className=\"results\">\r\n            {results.map(result=>(\r\n                <Result key={result.imdbID} result={result} openPopup={openPopup}/>\r\n            ))\r\n            }\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default Results\r\n","import React from 'react'\r\n\r\nfunction moreinfo({selected, closePopup}) {\r\n    return (\r\n        <section className=\"popup\">\r\n\t\t\t<div className=\"content\">\r\n\t\t\t\t<h2>{ selected.Title } <span>({ selected.Year })</span></h2>\r\n\t\t\t\t<p className=\"rating\">Rating: {selected.imdbRating}</p>\r\n\t\t\t\t<div className=\"plot\">\r\n\t\t\t\t\t<img src={selected.Poster} />\r\n\t\t\t\t\t<p>{selected.Plot}</p>\r\n\t\t\t\t</div>\r\n\t\t\t\t<button className=\"close\" onClick={closePopup}>Back</button>\r\n\t\t\t</div>\r\n\t\t</section>\r\n    )\r\n}\r\n\r\nexport default moreinfo\r\n","import React,{useState} from 'react';\nimport Search from './Components/Search';\nimport Results from './Components/Results';\nimport Moreinfo from './Components/moreinfo';\nimport axios from \"axios\";\nfunction App() {\n  const apiurl = \"http://www.omdbapi.com/?apikey=dfe6d885\";\n  const [state,setState] = useState({\n    s:\"\",//search query\n    results:[],\n    selected:{}\n  });\n  const search = (e)=>{\n    if(e.key===\"Enter\"){\n      axios(apiurl+\"&s=\"+state.s).then(({data})=>{\n        console.log(data);\n        let resluts=data.Search;\n        console.log(data.Search);\n        setState(prevState=>{\n          return {...prevState,results:resluts}\n        })\n      });\n    }\n  }\n  const handleInput=(e)=>{\n    let s=e.target.value;\n    setState(prevState=>{\n      return {...prevState,s:s}\n    });\n    // console.log(state.s);\n  }\n  const openPopup=id=>{\n    axios(apiurl+\"&i=\"+id).then(({data})=>{\n      let result=data;\n      // console.log(result);\n      setState(prevState=>{\n        return {...prevState,selected:result}\n      });\n    });\n  }\n  const closePop=()=>{\n    setState(prevState=>{\n      return {...prevState,selected:{}}\n    });\n  }\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Binge What?</h1>\n      </header>\n      <main>\n        <Search handleInput={handleInput} search={search}/>\n        <Results results={state.results} openPopup={openPopup}/>\n        {(typeof state.selected.Title != \"undefined\")?<Moreinfo selected={state.selected} closePopup={closePop}/>:false}\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}